import java.util.ArrayList;
import java.util.concurrent.*;

public class Main {

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        System.out.println("int(3x + 2x^2,-1,1)="
                + ParallelIntegral.parallelIntegrate(x -> 3*x + 2*x*x, -1, 1, 8));
    }
}

@FunctionalInterface
interface Function {
    public double get(double x);
}

class Integral implements Callable<Double> {

    Function f;
    double a;
    double b;

    public Integral(Function f, double a, double b) {
        this.f = f;
        this.a = a;
        this.b = b;
    }



    @Override
    public Double call() throws Exception {
        double sum = 0;
        double rectangeArea = 0;
        double delta = (b-a)/100;
        for (int i = 1; i <= 100; i++) {
                rectangeArea = delta * f.get(a + i*delta) ;
                sum += rectangeArea;
        }
        return  sum;
    }
}

class ParallelIntegral {
    public static double parallelIntegrate(Function f, double a, double b, int k) throws ExecutionException, InterruptedException {
        ExecutorService ex = Executors.newFixedThreadPool(k);
        ArrayList<Future<Double>> results = new ArrayList<>();
        Future<Double> result;
        double delta = (b-a)/k;
        for (int i  = 1 ; i <= k ; i++) {
            result = ex.submit(new Integral(f,a + (i-1)*delta, a + i*delta));
            results.add(result);
        }
        double sum = 0;
        for (int i  = 0 ; i < k ; i++) {
            sum +=  results.get(i).get();
        }
        return sum;
    }
}

